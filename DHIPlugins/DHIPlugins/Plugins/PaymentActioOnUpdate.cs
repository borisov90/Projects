// <copyright file="PaymentActioOnUpdate.cs" company="Microsoft">
// Copyright (c) 2016 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>7/15/2016 3:03:10 PM</date>
// <summary>Implements the PaymentActioOnUpdate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace DHIPlugins.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Client;
    using Microsoft.Xrm.Sdk.Query;
    using System.Linq;

    /// <summary>
    /// PaymentActioOnUpdate Plugin.
    /// Fires when the following attributes are updated:
    /// new_actionforpayment
    /// </summary>    
    public class PaymentActioOnUpdate: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentActioOnUpdate"/> class.
        /// </summary>
        public PaymentActioOnUpdate()
            : base(typeof(PaymentActioOnUpdate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "quote", new Action<LocalPluginContext>(ExecutePaymentActioOnUpdate)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePaymentActioOnUpdate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            // TODO: Implement your custom Plug-in business logic.


            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;
            Guid quoteProductID = (Guid)((Entity)context.InputParameters["Target"]).Id;
            var serviceContext = new OrganizationServiceContext(service);
            ColumnSet set = new ColumnSet();
            set.AllColumns = true;
            var quote = service.Retrieve("quote", quoteProductID, set);


            if (context.Depth > 1)
            {
                return;
            }
            else
            {

                var customerID = (EntityReference)quote["customerid"];

                var customer = service.Retrieve(customerID.LogicalName, customerID.Id, new ColumnSet() { AllColumns = true });

                Guid userId = context.InitiatingUserId;

                if (quote.Contains("new_actionforpayment"))
                {
                    var salesorderType = (OptionSetValue)quote["new_actionforpayment"];

                    if (salesorderType.Value == 1)
                    {
                        string quoteName = "";

                        if (quote.Contains("name"))
                        {
                            quoteName = (string)quote["name"];

                        }
                        else
                        {
                            quoteName = "Ново плащане";
                        }
                        //bool isTaxed = ((OptionSetValue)quote["new_vat"]).Value == 20;

                        string orderProductName = quoteName;
                        var prepayedAmount = (Money)quote["hcr_advance"];


                        //var advanceProductId = "14";
                        var currency = (EntityReference)quote["transactioncurrencyid"];
                        //decimal taxer = new Decimal(1.20);
                        //var prepaymentwithTax = new Money(prepayedAmount.Value * taxer);
                        var payment = new Entity("hcr_payments");
                        var countOfPayments = (int)quote["hcr_countpayments"];

                        payment["hcr_contactid"] = new EntityReference(customer.LogicalName, customer.Id);
                        payment["hcr_name"] = "Авансово плащане";
                        payment["hcr_quoteid"] = new EntityReference(quote.LogicalName, quote.Id);
                        payment["transactioncurrencyid"] = new EntityReference(currency.LogicalName, currency.Id);
                        payment["hcr_paidamount"] = new Money(prepayedAmount.Value);
                        payment["hcr_paymentstatus"] = new OptionSetValue(1);
                        payment["ownerid"] = new EntityReference("systemuser", context.InitiatingUserId); 
                      
                        var orderID = (Guid)service.Create(payment);


                        for (int i = 0; i < (int)countOfPayments; i++)
                        {

                            var parachutePayment = new Entity("hcr_payments");
                            var parachutePaymentAmount = (Money)quote["hcr_amountpayment"];
                            

                            parachutePayment["hcr_contactid"] = new EntityReference(customer.LogicalName, customer.Id);
                            parachutePayment["hcr_name"] = "Вноска по разсрочено плащане";
                            parachutePayment["hcr_quoteid"] = new EntityReference(quote.LogicalName, quote.Id);
                            parachutePayment["transactioncurrencyid"] = new EntityReference(currency.LogicalName, currency.Id);
                            parachutePayment["hcr_paidamount"] = new Money(parachutePaymentAmount.Value);
                            parachutePayment["hcr_paymentstatus"] = new OptionSetValue(1);
                            parachutePayment["ownerid"] = new EntityReference("systemuser", context.InitiatingUserId);
                            

                            var parachutePaymentID = (Guid)service.Create(parachutePayment);
                            
                        }
                    }
                }
            }
        }
    }
}
