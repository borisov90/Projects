//// <copyright file="PostAttachmentSearchUpdate.cs" company="Microsoft">
//// Copyright (c) 2014 All Rights Reserved
//// </copyright>
//// <author>Microsoft</author>
//// <date>12/22/2014 5:16:45 PM</date>
//// <summary>Implements the PostAttachmentSearchUpdate Plugin.</summary>
//// <auto-generated>
////     This code was generated by a tool.
////     Runtime Version:4.0.30319.1
//// </auto-generated>
//namespace AttachmentSearch.Plugins
//{


//    using System.Collections.Generic;
//    using System.Text;
//    using Microsoft.Crm.Sdk;
//    using System.Xml;
//    using System.Data.SqlClient;
//    using System;
//    using System.ServiceModel;
//    using Microsoft.Xrm.Sdk;
//    using Microsoft.Xrm.Sdk.Query;
//    using System.Linq;

//    /// <summary>
//    /// PostAttachmentSearchUpdate Plugin.
//    /// Fires when the following attributes are updated:
//    /// new_searchword
//    /// </summary>    
//    public class PostAttachmentSearchUpdate : Plugin
//    {
//        //define the EntityCollection that holds the values from the pages
//        public EntityCollection fullListOfEntities = new EntityCollection();
//        public StringBuilder ParticipantsCollection = new StringBuilder();
//        /// <summary>
//        /// Initializes a new instance of the <see cref="PostAttachmentSearchUpdate"/> class.
//        /// </summary>
//        public PostAttachmentSearchUpdate()
//            : base(typeof(PostAttachmentSearchUpdate))
//        {
//            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "new_attachmentsearch", new Action<LocalPluginContext>(ExecutePostAttachmentSearchUpdate)));

//            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
//            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
//        }

//        /// <summary>
//        /// Executes the plug-in.
//        /// </summary>
//        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
//        /// <see cref="IPluginExecutionContext"/>,
//        /// <see cref="IOrganizationService"/>
//        /// and <see cref="ITracingService"/>
//        /// </param>
//        /// <remarks>
//        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
//        /// The plug-in's Execute method should be written to be stateless as the constructor
//        /// is not called for every invocation of the plug-in. Also, multiple system threads
//        /// could execute the plug-in at the same time. All per invocation state information
//        /// is stored in the context. This means that you should not use global variables in plug-ins.
//        /// </remarks>
//        /// 

//        protected void ExecutePostAttachmentSearchUpdate(LocalPluginContext localContext)
//        {
//            if (localContext == null)
//            {
//                throw new ArgumentNullException("localContext");
//            }

//            // TODO: Implement your custom Plug-in business logic.
//            IPluginExecutionContext context = localContext.PluginExecutionContext;
//            IOrganizationService service = localContext.OrganizationService;

//            Guid searchID = (Guid)((Entity)context.InputParameters["Target"]).Id;
//            ColumnSet set = new ColumnSet();
//            set.AllColumns = true;
//            var searchEntity = service.Retrieve("new_attachmentsearch", searchID, set);

//            if (context.Depth > 1)
//            {
//                searchEntity["new_results"] = "This created a loop!";
//                return;
//            }
//            else
//            {
//                //acquires the keyword

//                string keywordToLook = (string)searchEntity["new_searchword"];
//                //creates the critieria of the query
//                ColumnSet NoteSet = new ColumnSet(new string[] { "new_documentbody"});
//                QueryExpression Notes = new QueryExpression { EntityName = "new_annotationtext", ColumnSet = NoteSet };
//                Notes.Criteria.AddCondition("documentbody", ConditionOperator.Contains, keywordToLook);

//                //retrieve the Notes that fulfill the condition
//                searchEntity["new_results"] = "";
//                EntityCollection NotesRetrieve = service.RetrieveMultiple(Notes);

//                foreach (var note in NotesRetrieve.Entities)
//                {
//                    ParticipantsCollection.AppendLine(note.Attributes["new_annotationtextid"].ToString());
//                }
//                searchEntity["new_results"] = "\r\n" + ParticipantsCollection.ToString();
                

//            }
//            service.Update(searchEntity);
//        }
//    }
//}
