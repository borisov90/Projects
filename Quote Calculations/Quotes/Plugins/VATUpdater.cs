// <copyright file="VATUpdater.cs" company="Microsoft">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>1/14/2015 3:47:27 PM</date>
// <summary>Implements the VATUpdater Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace Quotes.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using Microsoft.Crm.Sdk.Messages;
    using Microsoft.Xrm.Sdk.Client;
    using System.Linq;

    /// <summary>
    /// VATUpdater Plugin.
    /// Fires when the following attributes are updated:
    /// new_vat
    /// </summary>    
    public class VATUpdater : Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VATUpdater"/> class.
        /// </summary>
        public VATUpdater()
            : base(typeof(VATUpdater))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "quote", new Action<LocalPluginContext>(ExecuteVATUpdater)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecuteVATUpdater(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            // TODO: Implement your custom Plug-in business logic.

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;
            Guid quoteProductID = (Guid)((Entity)context.InputParameters["Target"]).Id;
            var serviceContext = new OrganizationServiceContext(service);
            ColumnSet set = new ColumnSet();
            set.AllColumns = true;
            var quote = service.Retrieve("quote", quoteProductID, set);

            if (context.Depth > 5)
            {
                return;
            }
            else
            {
                //First I get the base values that I need for the calculations

                var totalamount = (Money)quote["totallineitemamount"];
                var totalamountValue = (Money)quote["totalamount"];
                var discount = (Money)quote["totaldiscountamount"];
                var prepaymentValue = (OptionSetValue)quote["new_prepayment"];
                var VAT = (OptionSetValue)quote["new_vat"];
                var tax = totalamount.Value * VAT.Value / 100;
                var pricingType = (OptionSetValue)quote["new_pricingtype"];

                var SUMOfRecommendedValues = new Money();
                var currentRecommendedValue = new Money();

                quote["new_totalammountincludingvat"] = new Money((totalamount.Value) + tax);
                quote["new_prepayedamount"] = new Money((prepaymentValue.Value * totalamountValue.Value) / 100);

                ConditionExpression condition = new ConditionExpression();
                condition.AttributeName = "quoteid";
                condition.Operator = ConditionOperator.Equal;
                condition.Values.Add(quoteProductID);

                FilterExpression filter = new FilterExpression();
                filter.AddCondition(condition);

                QueryExpression query = new QueryExpression();
                query.EntityName = "quotedetail";
                query.ColumnSet = new ColumnSet(true);
                query.Criteria = filter;

                EntityCollection quotedetails = service.RetrieveMultiple(query);

                foreach (var detail in quotedetails.Entities)
                {
                    var quantity = (decimal)detail["quantity"];
                    var priceperunit = (Money)detail["priceperunit"];
                    var teamleader = (OptionSetValue)detail["new_tldiscount"];
                    var manualdiscountamount = (Money)detail.Attributes["manualdiscountamount"];
                    var baseamount = (Money)detail["baseamount"];

                    //finally I calculate the tax
                    detail["new_vat"] = new OptionSetValue(VAT.Value);
                    var taxDetail = (baseamount.Value - manualdiscountamount.Value) * VAT.Value / 100;
                    detail.Attributes["tax"] = new Money(taxDetail); //tax

                    service.Update(detail);

                    if (pricingType.Value == 2)
                    {
                        if (detail.Contains("new_recommendedvalue"))
                        {
                            currentRecommendedValue = (Money)detail["new_recommendedvalue"];
                            SUMOfRecommendedValues.Value += ((currentRecommendedValue.Value * quantity) - manualdiscountamount.Value);
                        }
                        else
                        {
                            currentRecommendedValue = new Money(priceperunit.Value * quantity);
                            SUMOfRecommendedValues.Value += (currentRecommendedValue.Value - manualdiscountamount.Value);
                        }
                    }
                    else if (pricingType.Value == 3)
                    {
                        if (detail.Contains("new_fixedpriceplusratio"))
                        {
                            currentRecommendedValue = (Money)detail["new_fixedpriceplusratio"];
                            SUMOfRecommendedValues.Value += ((currentRecommendedValue.Value * quantity) - manualdiscountamount.Value);
                        }
                        else
                        {
                            currentRecommendedValue = new Money(priceperunit.Value * quantity);
                            SUMOfRecommendedValues.Value += (currentRecommendedValue.Value - manualdiscountamount.Value);
                        }
                    }
                    else
                    {
                        if (detail.Contains("baseamount"))
                        {
                            currentRecommendedValue = (Money)detail["baseamount"];
                            SUMOfRecommendedValues.Value += currentRecommendedValue.Value;
                        }
                        else
                        {
                            currentRecommendedValue = new Money();
                            SUMOfRecommendedValues.Value += currentRecommendedValue.Value;
                        }
                    }

                    //I retrieve the new_recommendedvalue after the detail is updated because I don't want to update it
                    //currentRecommendedValue = (Money)detail["new_recommendedvalue"];
                    //SUMOfRecommendedValues.Value += currentRecommendedValue.Value;
                }
                quote["new_recommendedtotal"] = new Money(SUMOfRecommendedValues.Value);

                service.Update(quote);
            }
        }
    }
}
