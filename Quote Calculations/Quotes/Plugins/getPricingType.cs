// <copyright file="getPricingType.cs" company="Microsoft">
// Copyright (c) 2015 All Rights Reserved
// </copyright>
// <author>Microsoft</author>
// <date>2/27/2015 3:38:29 PM</date>
// <summary>Implements the getPricingType Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>
namespace Quotes.Plugins
{
    using System;
    using System.ServiceModel;
    using Microsoft.Xrm.Sdk;
    using Microsoft.Xrm.Sdk.Query;
    using System.Linq;

    /// <summary>
    /// getPricingType Plugin.
    /// Fires when the following attributes are updated:
    /// priceperunit
    /// Sets the minimum value of the quote product
    /// </summary>    
    public class getPricingType: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="getPricingType"/> class.
        /// </summary>
        public getPricingType()
            : base(typeof(getPricingType))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Update", "quotedetail", new Action<LocalPluginContext>(ExecutegetPricingType)));

            // Note : you can register for more events here if this plugin is not specific to an individual entity and message combination.
            // You may also need to update your RegisterFile.crmregister plug-in registration file to reflect any change.
        }

        /// <summary>
        /// Executes the plug-in.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics CRM caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        /// 
        protected void ExecutegetPricingType(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new ArgumentNullException("localContext");
            }

            // TODO: Implement your custom Plug-in business logic.

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;

            Guid quoteDetailID = (Guid)((Entity)context.InputParameters["Target"]).Id;
            ColumnSet set = new ColumnSet();
            set.AllColumns = true;
            var quoteDetail = service.Retrieve("quotedetail", quoteDetailID, set);

            if (context.Depth > 1)
            {
                return;
            }
            else
            {
                //var parentQuote = (Guid)quoteDetail["quoteid"];

                //var quote = service.Retrieve("quote", parentQuote, new ColumnSet(true));

                //var pricingType = (OptionSetValue)quote["new_pricingtype"];

                //quoteDetail["new_pricingtype"] = new OptionSetValue(pricingType.Value);

                var productID = (EntityReference)quoteDetail["productid"];
                var currentProduct = service.Retrieve(productID.LogicalName, productID.Id, new ColumnSet(true));
                var productPriceId = (EntityReference)currentProduct["pricelevelid"];
                var priceListProduct = service.Retrieve(productPriceId.LogicalName, productPriceId.Id, set);
                //Quote & Currency
                var quoteId = (EntityReference)quoteDetail["quoteid"];
                var parentQuote = service.Retrieve(quoteId.LogicalName, quoteId.Id, set);
                var priceLevelId = (EntityReference)parentQuote["pricelevelid"];
                var quotePriceList = service.Retrieve(priceLevelId.LogicalName, priceLevelId.Id, set);
                var priceCurrency = (EntityReference)quotePriceList["transactioncurrencyid"];
                var currency = service.Retrieve(priceCurrency.LogicalName, priceCurrency.Id, set);
                var price = currency["currencyname"];


                //Check the productLists
                ConditionExpression condition = new ConditionExpression();
                condition.AttributeName = "productid";
                condition.Operator = ConditionOperator.Equal;
                condition.Values.Add(productID.Id);

                //Currency check

                ConditionExpression priceType = new ConditionExpression();
                priceType.AttributeName = "transactioncurrencyid";
                priceType.Operator = ConditionOperator.Equal;
                priceType.Values.Add(currency.Id);

                FilterExpression filter = new FilterExpression();
                //filter.FilterOperator = LogicalOperator.And;
                filter.AddCondition(condition);
                filter.AddCondition(priceType);

                QueryExpression query = new QueryExpression();
                query.EntityName = "productpricelevel";
                query.ColumnSet = new ColumnSet(true);
                query.Criteria = filter;

                EntityCollection productpricelevels = service.RetrieveMultiple(query);
                var productpriceLevel = productpricelevels.Entities[0];
                //var productPricing = from c in context.ContactSetjoin a in context.AccountSet on c.ContactId equals a.PrimaryContactId.Id
                var productPrice = (Money)productpriceLevel["amount"];
                var priceperunit = (Money)quoteDetail["priceperunit"];
                if (productPrice.Value > priceperunit.Value)
                {
                    quoteDetail["priceperunit"] = new Money(productPrice.Value);
                }
                //quoteDetail["new_jobdescription"] = price;
                service.Update(quoteDetail);
            }
        }
    }
}
